{"version":3,"sources":["../5826764005552f7687d9.worker.js","../webpack/bootstrap 5826764005552f7687d9","store.worker.js","../node_modules/babel-runtime/regenerator/index.js","../node_modules/regenerator-runtime/runtime-module.js","../node_modules/regenerator-runtime/runtime.js","../../../worker.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","_asyncToGenerator","fn","gen","apply","this","arguments","Promise","resolve","reject","step","key","arg","info","value","error","done","then","err","fibonacci","num","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default","__WEBPACK_IMPORTED_MODULE_1_worker_store_worker__","_this","inc","state","count","dec","fib","number","delay","setTimeout","fetchNews","_x","_x2","_ref2","a","_callee","_ref","res","id","wrap","_context","prev","next","fetch","sent","json","t0","abrupt","news","stop","asyncGen","responses","_context2","status","g","Function","hadRuntime","regeneratorRuntime","getOwnPropertyNames","indexOf","oldRuntime","undefined","e","global","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","makeInvokeMethod","tryCatch","obj","type","GeneratorFunction","GeneratorFunctionPrototype","defineIteratorMethods","forEach","method","AsyncIterator","invoke","record","result","hasOwn","__await","unwrapped","enqueue","callInvokeWithMethodAndArg","previousPromise","GenStateSuspendedStart","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","_sent","dispatchException","GenStateSuspendedYield","iterator","return","TypeError","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","values","iterable","iteratorMethod","iteratorSymbol","isNaN","length","Op","$Symbol","Symbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","runtime","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","constructor","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","reverse","pop","skipTempReset","charAt","slice","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","throw","r","t","assign","u","postMessage","action","@init","onmessage","actionName","args","f","concat","data","put","runStore","default"],"mappings":"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","file":"5826764005552f7687d9.worker.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_worker_store_worker__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_worker_store_worker___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_worker_store_worker__);\nvar _this=this;function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{return Promise.resolve(value).then(function(value){step(\"next\",value);},function(err){step(\"throw\",err);});}}return step(\"next\");});};}function fibonacci(num){if(num<=1)return 1;return fibonacci(num-1)+fibonacci(num-2);}Object(__WEBPACK_IMPORTED_MODULE_1_worker_store_worker__[\"runStore\"])({inc:function inc(state){return{count:state.count+1};},dec:function dec(state){return{count:state.count-1};},// calc fibonacci in a webworker so main thread stays free\nfib:function fib(state,number){return{count:fibonacci(number)};},// using promises\ndelay:function delay(state){return new Promise(function(resolve,reject){setTimeout(function(){return resolve({count:state.count+1});},2000);});},//using async/await\nfetchNews:function(){var _ref2=_asyncToGenerator(/*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee(state,_ref){var id=_ref.id;var res;return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://jsonplaceholder.typicode.com/posts/\"+id);case 2:res=_context.sent;_context.next=5;return res.json();case 5:_context.t0=_context.sent;return _context.abrupt(\"return\",{news:_context.t0});case 7:case\"end\":return _context.stop();}}},_callee,_this);}));function fetchNews(_x,_x2){return _ref2.apply(this,arguments);}return fetchNews;}(),asyncGen:/*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function asyncGen(state){var responses,news;return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function asyncGen$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return Object(__WEBPACK_IMPORTED_MODULE_1_worker_store_worker__[\"put\"])({status:\"loading\"});case 3:_context2.next=5;return fetch(\"https://jsonplaceholder.typicode.com/posts/1\");case 5:responses=_context2.sent;_context2.next=8;return responses.json();case 8:news=_context2.sent;_context2.next=11;return Object(__WEBPACK_IMPORTED_MODULE_1_worker_store_worker__[\"put\"])({news:news});case 11:_context2.next=13;return Object(__WEBPACK_IMPORTED_MODULE_1_worker_store_worker__[\"put\"])({status:\"done\"});case 13:_context2.next=18;break;case 15:_context2.prev=15;_context2.t0=_context2[\"catch\"](0);return _context2.abrupt(\"return\",{status:\"loaded\",error:true});case 18:case\"end\":return _context2.stop();}}},asyncGen,this,[[0,15]]);})});\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(2);\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() { return this })() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(3);\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\nvar n,t,e=\"PUT\";function o(n){return\"function\"==typeof n.next&&\"function\"==typeof n.throw}function r(t,e){return void 0===e&&(e=!1),n=e?t:Object.assign(Object.assign({},n),t)}function u(n){var t;return(t={})[e]=n,t}function a(n){self.postMessage({state:n,action:t})}function i(n){var t=function(o){return o.value&&o.value[e]&&a(r(o.value[e])),o.done?Promise.resolve(o.value):Promise.resolve(o.value).then(function(e){return t(n.next(e))})};return t(n.next())}function c(e){var u=Object.assign({\"@init\":function(n,t){return t}},e);self.onmessage=function(e){return function(e){var c=e.actionName,s=e.args;t=c;var f=u[c].apply(u,[n].concat(s));\"function\"==typeof f&&(f=f()),f.then?f.then(function(n){a(r(n))}):o(f)?i(f):f&&a(r(f))}(e.data)}}var s=null;exports.put=u,exports.runStore=c,exports.default=s;\n//# sourceMappingURL=worker.js.map\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// 5826764005552f7687d9.worker.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5826764005552f7687d9","import { runStore, put } from \"worker-store/worker\";\n\nfunction fibonacci(num) {\n  if (num <= 1) return 1;\n  return fibonacci(num - 1) + fibonacci(num - 2);\n}\n\nrunStore({\n  inc: state => ({ count: state.count + 1 }),\n  dec: state => ({ count: state.count - 1 }),\n\n  // calc fibonacci in a webworker so main thread stays free\n  fib: (state, number) => ({ count: fibonacci(number) }),\n\n  // using promises\n  delay: state =>\n    new Promise((resolve, reject) => {\n      setTimeout(() => resolve({ count: state.count + 1 }), 2000);\n    }),\n\n  //using async/await\n  fetchNews: async (state, { id }) => {\n    let res = await fetch(\"https://jsonplaceholder.typicode.com/posts/\" + id);\n    return { news: await res.json() };\n  },\n\n  asyncGen: function*(state) {\n    try {\n      yield put({ status: \"loading\" });\n      const responses = yield fetch(\n        \"https://jsonplaceholder.typicode.com/posts/1\"\n      );\n      const news = yield responses.json();\n      yield put({ news: news });\n      yield put({ status: \"done\" });\n    } catch (err) {\n      return { status: \"loaded\", error: true };\n    }\n  }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/store.worker.js","module.exports = require(\"regenerator-runtime\");\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/regenerator/index.js\n// module id = 1\n// module chunks = 0","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() { return this })() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/regenerator-runtime/runtime-module.js\n// module id = 2\n// module chunks = 0","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/regenerator-runtime/runtime.js\n// module id = 3\n// module chunks = 0","var n,t,e=\"PUT\";function o(n){return\"function\"==typeof n.next&&\"function\"==typeof n.throw}function r(t,e){return void 0===e&&(e=!1),n=e?t:Object.assign(Object.assign({},n),t)}function u(n){var t;return(t={})[e]=n,t}function a(n){self.postMessage({state:n,action:t})}function i(n){var t=function(o){return o.value&&o.value[e]&&a(r(o.value[e])),o.done?Promise.resolve(o.value):Promise.resolve(o.value).then(function(e){return t(n.next(e))})};return t(n.next())}function c(e){var u=Object.assign({\"@init\":function(n,t){return t}},e);self.onmessage=function(e){return function(e){var c=e.actionName,s=e.args;t=c;var f=u[c].apply(u,[n].concat(s));\"function\"==typeof f&&(f=f()),f.then?f.then(function(n){a(r(n))}):o(f)?i(f):f&&a(r(f))}(e.data)}}var s=null;exports.put=u,exports.runStore=c,exports.default=s;\n//# sourceMappingURL=worker.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/stoyan/projects/worker-store/worker.js\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}